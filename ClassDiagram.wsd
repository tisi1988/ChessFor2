@startuml 'ChessFor2'

skinparam Linetype ortho

title 'ChessFor2'

package Enums {
enum Player{
    PLAYER1
    PLAYER2
}

enum TileStatus {
    IDLE
    PIECE_SELECTED
    PIECE_MOVEMENT
}

enum PieceColor {
    WHITE
    BLACK
}

enum PieceType {
    TOWER
    HORSE
    BISHOP
    QUEEN
    KING
    PAWN
}
}

class ChessFor2 {
    - currentPlayer : PlayerId
    + positionClicked(p:Position)
    + exitGame()
}

class Tile {
    - status : TileStatus
    + Tile(c:TileColor)
    + setStatus(s:TileStatus)
    + setPiece(p:Piece)
    + clear()
    + getPiece() : Piece
}
Tile "1" -- "0..1" Piece

class ChessBoard {
    + setActivePiece(p:Piece)
    + getPieceType(p:Position) : PieceType
}
ChessFor2 "1" -right- "1" ChessBoard
ChessBoard "1" -- "64" Tile
ChessBoard "1" -- "0..1" Position : -tileSelected

class BaseUserIO {
    + BaseUserIO(game : ChessFor2)
}
ChessFor2 "1" -- "1" BaseUserIO

package GUI {
class Gui {
    + Gui(game : ChessFor2)
    + startInputCapture()
}
BaseUserIO <|-- Gui

class GuiRenderHelper {
    + GuiRenderHelper(window : Window, renderer : Renderer, game : ChessFor2)
    + getOffsetX() : Integer
    + getOffsetY() : Integer
    + getTileSize() : Integer
}
Gui "1" - "1" GuiRenderHelper
class GuiInputHelper {
    + GuiInputHelper(tileClickCb : Function, exitCb : Function)
    - inputLoop()
}
Gui "1" -left "1" GuiInputHelper
}

abstract Piece {
    # color : PieceColor
    # type : PieceType
    + getMoves(p:Position) : vector<Position>
}

class Position {
    - x : Integer
    - y : Integer
    + Position(row:Integer, col:Integer)
    + getX() : Integer
    + getY() : Integer
}

ChessFor2 ..> Position


@enduml
